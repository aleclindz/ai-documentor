{
  "overview": "# Test Overview\n\n## Introduction\n\nThis is a test overview to demonstrate the enhanced formatting with table of contents and better typography.\n\n## Features\n\nThe documentation now includes:\n- Table of contents generation\n- Anchor links for navigation\n- Better typography and spacing\n- Enhanced visual hierarchy\n\n## Implementation\n\nThe improvements include enhanced CSS styling and JavaScript functionality.",
  "frontend": {
    "featuresAndFunctionality": "# Frontend Features & Functionality\n\n## Core Features Overview\n\nThis application provides:\n- **Documentation Generation**: Automated creation of comprehensive project documentation\n- **Interactive Web Interface**: User-friendly interface for browsing documentation\n- **Real-time Updates**: Live reloading and dynamic content updates\n- **Multi-format Support**: Support for various documentation formats\n\n## User Interface Components\n\nUsers interact with:\n- **Navigation Sidebar**: Easy access to different documentation sections\n- **Content Area**: Main viewing area with formatted documentation\n- **Search Functionality**: Quick find and navigation features\n- **Action Buttons**: Regenerate, print, and other utility functions\n\n## User Workflows & Interactions\n\nTypical user journeys include:\n1. **Browsing Documentation**: Navigate between sections using sidebar\n2. **Reading Content**: View formatted content with table of contents\n3. **Finding Information**: Use search and anchor links for quick navigation\n4. **Updating Content**: Regenerate documentation when codebase changes\n\n## Data & Information Display\n\nInformation is presented through:\n- **Structured Sections**: Overview, Frontend, Backend, Database, etc.\n- **Interactive Diagrams**: Architecture and flow diagrams\n- **Code Examples**: Syntax-highlighted code blocks\n- **API Documentation**: Detailed endpoint information",
    "overview": "# Technical Architecture\n\nThe frontend is built using modern web technologies with a focus on performance and usability. The architecture emphasizes clean separation of concerns and maintainable code structure.",
    "components": [],
    "pages": [],
    "styling": "Enhanced CSS with Tailwind utility classes",
    "stateManagement": "Vanilla JavaScript with DOM manipulation"
  },
  "backend": {
    "overview": "# Backend Documentation\n\n## API Endpoints\n\nThe backend provides RESTful APIs for documentation management and serving.\n\n## Server Architecture\n\nBuilt with Express.js and Node.js for optimal performance.",
    "apis": []
  },
  "database": {
    "overview": "# Database Structure\n\n## Data Models\n\nDocumentation data is stored in JSON format for flexibility and performance.\n\n## Storage Strategy\n\nFiles are organized in a hierarchical structure for easy access.",
    "schema": [],
    "queries": []
  },
  "userFlows": [],
  "architectureDiagram": "graph TB\n    A[User] --> B[Frontend Interface]\n    B --> C[Documentation Server]\n    C --> D[Generated Content]\n    D --> E[JSON Storage]",
  "apiDocumentation": [],
  "deploymentGuide": "# Deployment Guide\n\n## Prerequisites\n\n- Node.js 16+\n- npm or yarn\n\n## Installation Steps\n\n1. Clone repository\n2. Install dependencies\n3. Configure environment\n4. Start server",
  "troubleshooting": "# Troubleshooting\n\n## Common Issues\n\n### Server Won't Start\n- Check port availability\n- Verify Node.js version\n\n### Documentation Not Loading\n- Ensure documentation.json exists\n- Check file permissions"
}